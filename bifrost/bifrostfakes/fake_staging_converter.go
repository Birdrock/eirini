// Code generated by counterfeiter. DO NOT EDIT.
package bifrostfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/bifrost"
	"code.cloudfoundry.org/eirini/models/cf"
	"code.cloudfoundry.org/eirini/opi"
)

type FakeStagingConverter struct {
	ConvertStagingStub        func(string, cf.StagingRequest) (opi.StagingTask, error)
	convertStagingMutex       sync.RWMutex
	convertStagingArgsForCall []struct {
		arg1 string
		arg2 cf.StagingRequest
	}
	convertStagingReturns struct {
		result1 opi.StagingTask
		result2 error
	}
	convertStagingReturnsOnCall map[int]struct {
		result1 opi.StagingTask
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStagingConverter) ConvertStaging(arg1 string, arg2 cf.StagingRequest) (opi.StagingTask, error) {
	fake.convertStagingMutex.Lock()
	ret, specificReturn := fake.convertStagingReturnsOnCall[len(fake.convertStagingArgsForCall)]
	fake.convertStagingArgsForCall = append(fake.convertStagingArgsForCall, struct {
		arg1 string
		arg2 cf.StagingRequest
	}{arg1, arg2})
	stub := fake.ConvertStagingStub
	fakeReturns := fake.convertStagingReturns
	fake.recordInvocation("ConvertStaging", []interface{}{arg1, arg2})
	fake.convertStagingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStagingConverter) ConvertStagingCallCount() int {
	fake.convertStagingMutex.RLock()
	defer fake.convertStagingMutex.RUnlock()
	return len(fake.convertStagingArgsForCall)
}

func (fake *FakeStagingConverter) ConvertStagingCalls(stub func(string, cf.StagingRequest) (opi.StagingTask, error)) {
	fake.convertStagingMutex.Lock()
	defer fake.convertStagingMutex.Unlock()
	fake.ConvertStagingStub = stub
}

func (fake *FakeStagingConverter) ConvertStagingArgsForCall(i int) (string, cf.StagingRequest) {
	fake.convertStagingMutex.RLock()
	defer fake.convertStagingMutex.RUnlock()
	argsForCall := fake.convertStagingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStagingConverter) ConvertStagingReturns(result1 opi.StagingTask, result2 error) {
	fake.convertStagingMutex.Lock()
	defer fake.convertStagingMutex.Unlock()
	fake.ConvertStagingStub = nil
	fake.convertStagingReturns = struct {
		result1 opi.StagingTask
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingConverter) ConvertStagingReturnsOnCall(i int, result1 opi.StagingTask, result2 error) {
	fake.convertStagingMutex.Lock()
	defer fake.convertStagingMutex.Unlock()
	fake.ConvertStagingStub = nil
	if fake.convertStagingReturnsOnCall == nil {
		fake.convertStagingReturnsOnCall = make(map[int]struct {
			result1 opi.StagingTask
			result2 error
		})
	}
	fake.convertStagingReturnsOnCall[i] = struct {
		result1 opi.StagingTask
		result2 error
	}{result1, result2}
}

func (fake *FakeStagingConverter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convertStagingMutex.RLock()
	defer fake.convertStagingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStagingConverter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bifrost.StagingConverter = new(FakeStagingConverter)

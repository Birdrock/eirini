// Code generated by counterfeiter. DO NOT EDIT.
package eirinifakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini"
	"code.cloudfoundry.org/runtimeschema/cc_messages"
)

type FakeConverger struct {
	ConvergeOnceStub        func(ctx context.Context, ccMessages []cc_messages.DesireAppRequestFromCC) error
	convergeOnceMutex       sync.RWMutex
	convergeOnceArgsForCall []struct {
		ctx        context.Context
		ccMessages []cc_messages.DesireAppRequestFromCC
	}
	convergeOnceReturns struct {
		result1 error
	}
	convergeOnceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConverger) ConvergeOnce(ctx context.Context, ccMessages []cc_messages.DesireAppRequestFromCC) error {
	var ccMessagesCopy []cc_messages.DesireAppRequestFromCC
	if ccMessages != nil {
		ccMessagesCopy = make([]cc_messages.DesireAppRequestFromCC, len(ccMessages))
		copy(ccMessagesCopy, ccMessages)
	}
	fake.convergeOnceMutex.Lock()
	ret, specificReturn := fake.convergeOnceReturnsOnCall[len(fake.convergeOnceArgsForCall)]
	fake.convergeOnceArgsForCall = append(fake.convergeOnceArgsForCall, struct {
		ctx        context.Context
		ccMessages []cc_messages.DesireAppRequestFromCC
	}{ctx, ccMessagesCopy})
	fake.recordInvocation("ConvergeOnce", []interface{}{ctx, ccMessagesCopy})
	fake.convergeOnceMutex.Unlock()
	if fake.ConvergeOnceStub != nil {
		return fake.ConvergeOnceStub(ctx, ccMessages)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.convergeOnceReturns.result1
}

func (fake *FakeConverger) ConvergeOnceCallCount() int {
	fake.convergeOnceMutex.RLock()
	defer fake.convergeOnceMutex.RUnlock()
	return len(fake.convergeOnceArgsForCall)
}

func (fake *FakeConverger) ConvergeOnceArgsForCall(i int) (context.Context, []cc_messages.DesireAppRequestFromCC) {
	fake.convergeOnceMutex.RLock()
	defer fake.convergeOnceMutex.RUnlock()
	return fake.convergeOnceArgsForCall[i].ctx, fake.convergeOnceArgsForCall[i].ccMessages
}

func (fake *FakeConverger) ConvergeOnceReturns(result1 error) {
	fake.ConvergeOnceStub = nil
	fake.convergeOnceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConverger) ConvergeOnceReturnsOnCall(i int, result1 error) {
	fake.ConvergeOnceStub = nil
	if fake.convergeOnceReturnsOnCall == nil {
		fake.convergeOnceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.convergeOnceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConverger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.convergeOnceMutex.RLock()
	defer fake.convergeOnceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConverger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ eirini.Converger = new(FakeConverger)

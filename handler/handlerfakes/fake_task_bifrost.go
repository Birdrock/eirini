// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/eirini/handler"
	"code.cloudfoundry.org/eirini/models/cf"
)

type FakeTaskBifrost struct {
	CancelTaskStub        func(string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		arg1 string
	}
	cancelTaskReturns struct {
		result1 error
	}
	cancelTaskReturnsOnCall map[int]struct {
		result1 error
	}
	GetTaskStub        func(string) (cf.TaskResponse, error)
	getTaskMutex       sync.RWMutex
	getTaskArgsForCall []struct {
		arg1 string
	}
	getTaskReturns struct {
		result1 cf.TaskResponse
		result2 error
	}
	getTaskReturnsOnCall map[int]struct {
		result1 cf.TaskResponse
		result2 error
	}
	TransferTaskStub        func(context.Context, string, cf.TaskRequest) error
	transferTaskMutex       sync.RWMutex
	transferTaskArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 cf.TaskRequest
	}
	transferTaskReturns struct {
		result1 error
	}
	transferTaskReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskBifrost) CancelTask(arg1 string) error {
	fake.cancelTaskMutex.Lock()
	ret, specificReturn := fake.cancelTaskReturnsOnCall[len(fake.cancelTaskArgsForCall)]
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CancelTask", []interface{}{arg1})
	fake.cancelTaskMutex.Unlock()
	if fake.CancelTaskStub != nil {
		return fake.CancelTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cancelTaskReturns
	return fakeReturns.result1
}

func (fake *FakeTaskBifrost) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeTaskBifrost) CancelTaskCalls(stub func(string) error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = stub
}

func (fake *FakeTaskBifrost) CancelTaskArgsForCall(i int) string {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	argsForCall := fake.cancelTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskBifrost) CancelTaskReturns(result1 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskBifrost) CancelTaskReturnsOnCall(i int, result1 error) {
	fake.cancelTaskMutex.Lock()
	defer fake.cancelTaskMutex.Unlock()
	fake.CancelTaskStub = nil
	if fake.cancelTaskReturnsOnCall == nil {
		fake.cancelTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cancelTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskBifrost) GetTask(arg1 string) (cf.TaskResponse, error) {
	fake.getTaskMutex.Lock()
	ret, specificReturn := fake.getTaskReturnsOnCall[len(fake.getTaskArgsForCall)]
	fake.getTaskArgsForCall = append(fake.getTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTask", []interface{}{arg1})
	fake.getTaskMutex.Unlock()
	if fake.GetTaskStub != nil {
		return fake.GetTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskBifrost) GetTaskCallCount() int {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	return len(fake.getTaskArgsForCall)
}

func (fake *FakeTaskBifrost) GetTaskCalls(stub func(string) (cf.TaskResponse, error)) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = stub
}

func (fake *FakeTaskBifrost) GetTaskArgsForCall(i int) string {
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	argsForCall := fake.getTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTaskBifrost) GetTaskReturns(result1 cf.TaskResponse, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	fake.getTaskReturns = struct {
		result1 cf.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskBifrost) GetTaskReturnsOnCall(i int, result1 cf.TaskResponse, result2 error) {
	fake.getTaskMutex.Lock()
	defer fake.getTaskMutex.Unlock()
	fake.GetTaskStub = nil
	if fake.getTaskReturnsOnCall == nil {
		fake.getTaskReturnsOnCall = make(map[int]struct {
			result1 cf.TaskResponse
			result2 error
		})
	}
	fake.getTaskReturnsOnCall[i] = struct {
		result1 cf.TaskResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskBifrost) TransferTask(arg1 context.Context, arg2 string, arg3 cf.TaskRequest) error {
	fake.transferTaskMutex.Lock()
	ret, specificReturn := fake.transferTaskReturnsOnCall[len(fake.transferTaskArgsForCall)]
	fake.transferTaskArgsForCall = append(fake.transferTaskArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 cf.TaskRequest
	}{arg1, arg2, arg3})
	fake.recordInvocation("TransferTask", []interface{}{arg1, arg2, arg3})
	fake.transferTaskMutex.Unlock()
	if fake.TransferTaskStub != nil {
		return fake.TransferTaskStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.transferTaskReturns
	return fakeReturns.result1
}

func (fake *FakeTaskBifrost) TransferTaskCallCount() int {
	fake.transferTaskMutex.RLock()
	defer fake.transferTaskMutex.RUnlock()
	return len(fake.transferTaskArgsForCall)
}

func (fake *FakeTaskBifrost) TransferTaskCalls(stub func(context.Context, string, cf.TaskRequest) error) {
	fake.transferTaskMutex.Lock()
	defer fake.transferTaskMutex.Unlock()
	fake.TransferTaskStub = stub
}

func (fake *FakeTaskBifrost) TransferTaskArgsForCall(i int) (context.Context, string, cf.TaskRequest) {
	fake.transferTaskMutex.RLock()
	defer fake.transferTaskMutex.RUnlock()
	argsForCall := fake.transferTaskArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTaskBifrost) TransferTaskReturns(result1 error) {
	fake.transferTaskMutex.Lock()
	defer fake.transferTaskMutex.Unlock()
	fake.TransferTaskStub = nil
	fake.transferTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskBifrost) TransferTaskReturnsOnCall(i int, result1 error) {
	fake.transferTaskMutex.Lock()
	defer fake.transferTaskMutex.Unlock()
	fake.TransferTaskStub = nil
	if fake.transferTaskReturnsOnCall == nil {
		fake.transferTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.transferTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskBifrost) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	fake.getTaskMutex.RLock()
	defer fake.getTaskMutex.RUnlock()
	fake.transferTaskMutex.RLock()
	defer fake.transferTaskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskBifrost) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.TaskBifrost = new(FakeTaskBifrost)

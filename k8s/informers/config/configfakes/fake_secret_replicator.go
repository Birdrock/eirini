// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/k8s/informers/config"
)

type FakeSecretReplicator struct {
	ReplicateSecretStub        func(string, string, string, string) error
	replicateSecretMutex       sync.RWMutex
	replicateSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	replicateSecretReturns struct {
		result1 error
	}
	replicateSecretReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretReplicator) ReplicateSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.replicateSecretMutex.Lock()
	ret, specificReturn := fake.replicateSecretReturnsOnCall[len(fake.replicateSecretArgsForCall)]
	fake.replicateSecretArgsForCall = append(fake.replicateSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ReplicateSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.replicateSecretMutex.Unlock()
	if fake.ReplicateSecretStub != nil {
		return fake.ReplicateSecretStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.replicateSecretReturns
	return fakeReturns.result1
}

func (fake *FakeSecretReplicator) ReplicateSecretCallCount() int {
	fake.replicateSecretMutex.RLock()
	defer fake.replicateSecretMutex.RUnlock()
	return len(fake.replicateSecretArgsForCall)
}

func (fake *FakeSecretReplicator) ReplicateSecretCalls(stub func(string, string, string, string) error) {
	fake.replicateSecretMutex.Lock()
	defer fake.replicateSecretMutex.Unlock()
	fake.ReplicateSecretStub = stub
}

func (fake *FakeSecretReplicator) ReplicateSecretArgsForCall(i int) (string, string, string, string) {
	fake.replicateSecretMutex.RLock()
	defer fake.replicateSecretMutex.RUnlock()
	argsForCall := fake.replicateSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSecretReplicator) ReplicateSecretReturns(result1 error) {
	fake.replicateSecretMutex.Lock()
	defer fake.replicateSecretMutex.Unlock()
	fake.ReplicateSecretStub = nil
	fake.replicateSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecretReplicator) ReplicateSecretReturnsOnCall(i int, result1 error) {
	fake.replicateSecretMutex.Lock()
	defer fake.replicateSecretMutex.Unlock()
	fake.ReplicateSecretStub = nil
	if fake.replicateSecretReturnsOnCall == nil {
		fake.replicateSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.replicateSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecretReplicator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replicateSecretMutex.RLock()
	defer fake.replicateSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretReplicator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.SecretReplicator = new(FakeSecretReplicator)

// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/k8s"
	"code.cloudfoundry.org/eirini/opi"
)

type FakeIngressManager struct {
	UpdateIngressStub        func(namespace string, lrp opi.LRP) error
	updateIngressMutex       sync.RWMutex
	updateIngressArgsForCall []struct {
		namespace string
		lrp       opi.LRP
	}
	updateIngressReturns struct {
		result1 error
	}
	updateIngressReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteIngressRulesStub        func(namespace string, serviceName string) error
	deleteIngressRulesMutex       sync.RWMutex
	deleteIngressRulesArgsForCall []struct {
		namespace   string
		serviceName string
	}
	deleteIngressRulesReturns struct {
		result1 error
	}
	deleteIngressRulesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIngressManager) UpdateIngress(namespace string, lrp opi.LRP) error {
	fake.updateIngressMutex.Lock()
	ret, specificReturn := fake.updateIngressReturnsOnCall[len(fake.updateIngressArgsForCall)]
	fake.updateIngressArgsForCall = append(fake.updateIngressArgsForCall, struct {
		namespace string
		lrp       opi.LRP
	}{namespace, lrp})
	fake.recordInvocation("UpdateIngress", []interface{}{namespace, lrp})
	fake.updateIngressMutex.Unlock()
	if fake.UpdateIngressStub != nil {
		return fake.UpdateIngressStub(namespace, lrp)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateIngressReturns.result1
}

func (fake *FakeIngressManager) UpdateIngressCallCount() int {
	fake.updateIngressMutex.RLock()
	defer fake.updateIngressMutex.RUnlock()
	return len(fake.updateIngressArgsForCall)
}

func (fake *FakeIngressManager) UpdateIngressArgsForCall(i int) (string, opi.LRP) {
	fake.updateIngressMutex.RLock()
	defer fake.updateIngressMutex.RUnlock()
	return fake.updateIngressArgsForCall[i].namespace, fake.updateIngressArgsForCall[i].lrp
}

func (fake *FakeIngressManager) UpdateIngressReturns(result1 error) {
	fake.UpdateIngressStub = nil
	fake.updateIngressReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressManager) UpdateIngressReturnsOnCall(i int, result1 error) {
	fake.UpdateIngressStub = nil
	if fake.updateIngressReturnsOnCall == nil {
		fake.updateIngressReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateIngressReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressManager) DeleteIngressRules(namespace string, serviceName string) error {
	fake.deleteIngressRulesMutex.Lock()
	ret, specificReturn := fake.deleteIngressRulesReturnsOnCall[len(fake.deleteIngressRulesArgsForCall)]
	fake.deleteIngressRulesArgsForCall = append(fake.deleteIngressRulesArgsForCall, struct {
		namespace   string
		serviceName string
	}{namespace, serviceName})
	fake.recordInvocation("DeleteIngressRules", []interface{}{namespace, serviceName})
	fake.deleteIngressRulesMutex.Unlock()
	if fake.DeleteIngressRulesStub != nil {
		return fake.DeleteIngressRulesStub(namespace, serviceName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteIngressRulesReturns.result1
}

func (fake *FakeIngressManager) DeleteIngressRulesCallCount() int {
	fake.deleteIngressRulesMutex.RLock()
	defer fake.deleteIngressRulesMutex.RUnlock()
	return len(fake.deleteIngressRulesArgsForCall)
}

func (fake *FakeIngressManager) DeleteIngressRulesArgsForCall(i int) (string, string) {
	fake.deleteIngressRulesMutex.RLock()
	defer fake.deleteIngressRulesMutex.RUnlock()
	return fake.deleteIngressRulesArgsForCall[i].namespace, fake.deleteIngressRulesArgsForCall[i].serviceName
}

func (fake *FakeIngressManager) DeleteIngressRulesReturns(result1 error) {
	fake.DeleteIngressRulesStub = nil
	fake.deleteIngressRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressManager) DeleteIngressRulesReturnsOnCall(i int, result1 error) {
	fake.DeleteIngressRulesStub = nil
	if fake.deleteIngressRulesReturnsOnCall == nil {
		fake.deleteIngressRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteIngressRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIngressManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateIngressMutex.RLock()
	defer fake.updateIngressMutex.RUnlock()
	fake.deleteIngressRulesMutex.RLock()
	defer fake.deleteIngressRulesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIngressManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.IngressManager = new(FakeIngressManager)

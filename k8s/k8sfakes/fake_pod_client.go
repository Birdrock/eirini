// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/k8s"
	"code.cloudfoundry.org/eirini/opi"
	v1 "k8s.io/api/core/v1"
)

type FakePodClient struct {
	DeleteStub        func(string, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllStub        func() ([]v1.Pod, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
	}
	getAllReturns struct {
		result1 []v1.Pod
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 []v1.Pod
		result2 error
	}
	GetByLRPIdentifierStub        func(opi.LRPIdentifier) ([]v1.Pod, error)
	getByLRPIdentifierMutex       sync.RWMutex
	getByLRPIdentifierArgsForCall []struct {
		arg1 opi.LRPIdentifier
	}
	getByLRPIdentifierReturns struct {
		result1 []v1.Pod
		result2 error
	}
	getByLRPIdentifierReturnsOnCall map[int]struct {
		result1 []v1.Pod
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePodClient) Delete(arg1 string, arg2 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePodClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakePodClient) DeleteCalls(stub func(string, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakePodClient) DeleteArgsForCall(i int) (string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePodClient) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePodClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePodClient) GetAll() ([]v1.Pod, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
	}{})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAll", []interface{}{})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePodClient) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakePodClient) GetAllCalls(stub func() ([]v1.Pod, error)) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *FakePodClient) GetAllReturns(result1 []v1.Pod, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakePodClient) GetAllReturnsOnCall(i int, result1 []v1.Pod, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 []v1.Pod
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 []v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakePodClient) GetByLRPIdentifier(arg1 opi.LRPIdentifier) ([]v1.Pod, error) {
	fake.getByLRPIdentifierMutex.Lock()
	ret, specificReturn := fake.getByLRPIdentifierReturnsOnCall[len(fake.getByLRPIdentifierArgsForCall)]
	fake.getByLRPIdentifierArgsForCall = append(fake.getByLRPIdentifierArgsForCall, struct {
		arg1 opi.LRPIdentifier
	}{arg1})
	stub := fake.GetByLRPIdentifierStub
	fakeReturns := fake.getByLRPIdentifierReturns
	fake.recordInvocation("GetByLRPIdentifier", []interface{}{arg1})
	fake.getByLRPIdentifierMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePodClient) GetByLRPIdentifierCallCount() int {
	fake.getByLRPIdentifierMutex.RLock()
	defer fake.getByLRPIdentifierMutex.RUnlock()
	return len(fake.getByLRPIdentifierArgsForCall)
}

func (fake *FakePodClient) GetByLRPIdentifierCalls(stub func(opi.LRPIdentifier) ([]v1.Pod, error)) {
	fake.getByLRPIdentifierMutex.Lock()
	defer fake.getByLRPIdentifierMutex.Unlock()
	fake.GetByLRPIdentifierStub = stub
}

func (fake *FakePodClient) GetByLRPIdentifierArgsForCall(i int) opi.LRPIdentifier {
	fake.getByLRPIdentifierMutex.RLock()
	defer fake.getByLRPIdentifierMutex.RUnlock()
	argsForCall := fake.getByLRPIdentifierArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePodClient) GetByLRPIdentifierReturns(result1 []v1.Pod, result2 error) {
	fake.getByLRPIdentifierMutex.Lock()
	defer fake.getByLRPIdentifierMutex.Unlock()
	fake.GetByLRPIdentifierStub = nil
	fake.getByLRPIdentifierReturns = struct {
		result1 []v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakePodClient) GetByLRPIdentifierReturnsOnCall(i int, result1 []v1.Pod, result2 error) {
	fake.getByLRPIdentifierMutex.Lock()
	defer fake.getByLRPIdentifierMutex.Unlock()
	fake.GetByLRPIdentifierStub = nil
	if fake.getByLRPIdentifierReturnsOnCall == nil {
		fake.getByLRPIdentifierReturnsOnCall = make(map[int]struct {
			result1 []v1.Pod
			result2 error
		})
	}
	fake.getByLRPIdentifierReturnsOnCall[i] = struct {
		result1 []v1.Pod
		result2 error
	}{result1, result2}
}

func (fake *FakePodClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	fake.getByLRPIdentifierMutex.RLock()
	defer fake.getByLRPIdentifierMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePodClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.PodClient = new(FakePodClient)

// Code generated by counterfeiter. DO NOT EDIT.
package kubeletfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/k8s/kubelet"
)

type FakeAPI struct {
	StatsSummaryStub        func(string) (kubelet.StatsSummary, error)
	statsSummaryMutex       sync.RWMutex
	statsSummaryArgsForCall []struct {
		arg1 string
	}
	statsSummaryReturns struct {
		result1 kubelet.StatsSummary
		result2 error
	}
	statsSummaryReturnsOnCall map[int]struct {
		result1 kubelet.StatsSummary
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) StatsSummary(arg1 string) (kubelet.StatsSummary, error) {
	fake.statsSummaryMutex.Lock()
	ret, specificReturn := fake.statsSummaryReturnsOnCall[len(fake.statsSummaryArgsForCall)]
	fake.statsSummaryArgsForCall = append(fake.statsSummaryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.StatsSummaryStub
	fakeReturns := fake.statsSummaryReturns
	fake.recordInvocation("StatsSummary", []interface{}{arg1})
	fake.statsSummaryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAPI) StatsSummaryCallCount() int {
	fake.statsSummaryMutex.RLock()
	defer fake.statsSummaryMutex.RUnlock()
	return len(fake.statsSummaryArgsForCall)
}

func (fake *FakeAPI) StatsSummaryCalls(stub func(string) (kubelet.StatsSummary, error)) {
	fake.statsSummaryMutex.Lock()
	defer fake.statsSummaryMutex.Unlock()
	fake.StatsSummaryStub = stub
}

func (fake *FakeAPI) StatsSummaryArgsForCall(i int) string {
	fake.statsSummaryMutex.RLock()
	defer fake.statsSummaryMutex.RUnlock()
	argsForCall := fake.statsSummaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPI) StatsSummaryReturns(result1 kubelet.StatsSummary, result2 error) {
	fake.statsSummaryMutex.Lock()
	defer fake.statsSummaryMutex.Unlock()
	fake.StatsSummaryStub = nil
	fake.statsSummaryReturns = struct {
		result1 kubelet.StatsSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) StatsSummaryReturnsOnCall(i int, result1 kubelet.StatsSummary, result2 error) {
	fake.statsSummaryMutex.Lock()
	defer fake.statsSummaryMutex.Unlock()
	fake.StatsSummaryStub = nil
	if fake.statsSummaryReturnsOnCall == nil {
		fake.statsSummaryReturnsOnCall = make(map[int]struct {
			result1 kubelet.StatsSummary
			result2 error
		})
	}
	fake.statsSummaryReturnsOnCall[i] = struct {
		result1 kubelet.StatsSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.statsSummaryMutex.RLock()
	defer fake.statsSummaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kubelet.API = new(FakeAPI)

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	eiriniv1 "code.cloudfoundry.org/eirini/crd/eirini/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeLRPs implements LRPInterface
type FakeLRPs struct {
	Fake *FakeEiriniV1
	ns   string
}

var lrpsResource = schema.GroupVersionResource{Group: "eirini.cf", Version: "v1", Resource: "lrps"}

var lrpsKind = schema.GroupVersionKind{Group: "eirini.cf", Version: "v1", Kind: "LRP"}

// Get takes name of the lRP, and returns the corresponding lRP object, and an error if there is any.
func (c *FakeLRPs) Get(name string, options v1.GetOptions) (result *eiriniv1.LRP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(lrpsResource, c.ns, name), &eiriniv1.LRP{})

	if obj == nil {
		return nil, err
	}
	return obj.(*eiriniv1.LRP), err
}

// List takes label and field selectors, and returns the list of LRPs that match those selectors.
func (c *FakeLRPs) List(opts v1.ListOptions) (result *eiriniv1.LRPList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(lrpsResource, lrpsKind, c.ns, opts), &eiriniv1.LRPList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &eiriniv1.LRPList{ListMeta: obj.(*eiriniv1.LRPList).ListMeta}
	for _, item := range obj.(*eiriniv1.LRPList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested lRPs.
func (c *FakeLRPs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(lrpsResource, c.ns, opts))

}

// Create takes the representation of a lRP and creates it.  Returns the server's representation of the lRP, and an error, if there is any.
func (c *FakeLRPs) Create(lRP *eiriniv1.LRP) (result *eiriniv1.LRP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(lrpsResource, c.ns, lRP), &eiriniv1.LRP{})

	if obj == nil {
		return nil, err
	}
	return obj.(*eiriniv1.LRP), err
}

// Update takes the representation of a lRP and updates it. Returns the server's representation of the lRP, and an error, if there is any.
func (c *FakeLRPs) Update(lRP *eiriniv1.LRP) (result *eiriniv1.LRP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(lrpsResource, c.ns, lRP), &eiriniv1.LRP{})

	if obj == nil {
		return nil, err
	}
	return obj.(*eiriniv1.LRP), err
}

// Delete takes name of the lRP and deletes it. Returns an error if one occurs.
func (c *FakeLRPs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(lrpsResource, c.ns, name), &eiriniv1.LRP{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeLRPs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(lrpsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &eiriniv1.LRPList{})
	return err
}

// Patch applies the patch and returns the patched lRP.
func (c *FakeLRPs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *eiriniv1.LRP, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(lrpsResource, c.ns, name, pt, data, subresources...), &eiriniv1.LRP{})

	if obj == nil {
		return nil, err
	}
	return obj.(*eiriniv1.LRP), err
}

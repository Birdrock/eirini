// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "code.cloudfoundry.org/eirini/crd/eirini/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LRPLister helps list LRPs.
type LRPLister interface {
	// List lists all LRPs in the indexer.
	List(selector labels.Selector) (ret []*v1.LRP, err error)
	// LRPs returns an object that can list and get LRPs.
	LRPs(namespace string) LRPNamespaceLister
	LRPListerExpansion
}

// lRPLister implements the LRPLister interface.
type lRPLister struct {
	indexer cache.Indexer
}

// NewLRPLister returns a new LRPLister.
func NewLRPLister(indexer cache.Indexer) LRPLister {
	return &lRPLister{indexer: indexer}
}

// List lists all LRPs in the indexer.
func (s *lRPLister) List(selector labels.Selector) (ret []*v1.LRP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LRP))
	})
	return ret, err
}

// LRPs returns an object that can list and get LRPs.
func (s *lRPLister) LRPs(namespace string) LRPNamespaceLister {
	return lRPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LRPNamespaceLister helps list and get LRPs.
type LRPNamespaceLister interface {
	// List lists all LRPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.LRP, err error)
	// Get retrieves the LRP from the indexer for a given namespace and name.
	Get(name string) (*v1.LRP, error)
	LRPNamespaceListerExpansion
}

// lRPNamespaceLister implements the LRPNamespaceLister
// interface.
type lRPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LRPs in the indexer for a given namespace.
func (s lRPNamespaceLister) List(selector labels.Selector) (ret []*v1.LRP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LRP))
	})
	return ret, err
}

// Get retrieves the LRP from the indexer for a given namespace and name.
func (s lRPNamespaceLister) Get(name string) (*v1.LRP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("lrp"), name)
	}
	return obj.(*v1.LRP), nil
}

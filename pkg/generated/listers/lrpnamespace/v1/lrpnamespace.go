/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "code.cloudfoundry.org/eirini/pkg/apis/lrpnamespace/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LrpNamespaceLister helps list LrpNamespaces.
type LrpNamespaceLister interface {
	// List lists all LrpNamespaces in the indexer.
	List(selector labels.Selector) (ret []*v1.LrpNamespace, err error)
	// LrpNamespaces returns an object that can list and get LrpNamespaces.
	LrpNamespaces(namespace string) LrpNamespaceNamespaceLister
	LrpNamespaceListerExpansion
}

// lrpNamespaceLister implements the LrpNamespaceLister interface.
type lrpNamespaceLister struct {
	indexer cache.Indexer
}

// NewLrpNamespaceLister returns a new LrpNamespaceLister.
func NewLrpNamespaceLister(indexer cache.Indexer) LrpNamespaceLister {
	return &lrpNamespaceLister{indexer: indexer}
}

// List lists all LrpNamespaces in the indexer.
func (s *lrpNamespaceLister) List(selector labels.Selector) (ret []*v1.LrpNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LrpNamespace))
	})
	return ret, err
}

// LrpNamespaces returns an object that can list and get LrpNamespaces.
func (s *lrpNamespaceLister) LrpNamespaces(namespace string) LrpNamespaceNamespaceLister {
	return lrpNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LrpNamespaceNamespaceLister helps list and get LrpNamespaces.
type LrpNamespaceNamespaceLister interface {
	// List lists all LrpNamespaces in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.LrpNamespace, err error)
	// Get retrieves the LrpNamespace from the indexer for a given namespace and name.
	Get(name string) (*v1.LrpNamespace, error)
	LrpNamespaceNamespaceListerExpansion
}

// lrpNamespaceNamespaceLister implements the LrpNamespaceNamespaceLister
// interface.
type lrpNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LrpNamespaces in the indexer for a given namespace.
func (s lrpNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1.LrpNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LrpNamespace))
	})
	return ret, err
}

// Get retrieves the LrpNamespace from the indexer for a given namespace and name.
func (s lrpNamespaceNamespaceLister) Get(name string) (*v1.LrpNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("lrpnamespace"), name)
	}
	return obj.(*v1.LrpNamespace), nil
}

// Code generated by counterfeiter. DO NOT EDIT.
package utilfakes

import (
	"sync"

	"code.cloudfoundry.org/eirini/util"
)

type FakeHasher struct {
	HashStub        func(string) (string, error)
	hashMutex       sync.RWMutex
	hashArgsForCall []struct {
		arg1 string
	}
	hashReturns struct {
		result1 string
		result2 error
	}
	hashReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHasher) Hash(arg1 string) (string, error) {
	fake.hashMutex.Lock()
	ret, specificReturn := fake.hashReturnsOnCall[len(fake.hashArgsForCall)]
	fake.hashArgsForCall = append(fake.hashArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Hash", []interface{}{arg1})
	fake.hashMutex.Unlock()
	if fake.HashStub != nil {
		return fake.HashStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.hashReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHasher) HashCallCount() int {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	return len(fake.hashArgsForCall)
}

func (fake *FakeHasher) HashCalls(stub func(string) (string, error)) {
	fake.hashMutex.Lock()
	defer fake.hashMutex.Unlock()
	fake.HashStub = stub
}

func (fake *FakeHasher) HashArgsForCall(i int) string {
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	argsForCall := fake.hashArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeHasher) HashReturns(result1 string, result2 error) {
	fake.hashMutex.Lock()
	defer fake.hashMutex.Unlock()
	fake.HashStub = nil
	fake.hashReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHasher) HashReturnsOnCall(i int, result1 string, result2 error) {
	fake.hashMutex.Lock()
	defer fake.hashMutex.Unlock()
	fake.HashStub = nil
	if fake.hashReturnsOnCall == nil {
		fake.hashReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.hashReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHasher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hashMutex.RLock()
	defer fake.hashMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHasher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ util.Hasher = new(FakeHasher)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cached_dependency.proto

package models

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CachedDependency struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name"`
	From              string `protobuf:"bytes,2,opt,name=from" json:"from"`
	To                string `protobuf:"bytes,3,opt,name=to" json:"to"`
	CacheKey          string `protobuf:"bytes,4,opt,name=cache_key,json=cacheKey" json:"cache_key"`
	LogSource         string `protobuf:"bytes,5,opt,name=log_source,json=logSource" json:"log_source"`
	ChecksumAlgorithm string `protobuf:"bytes,6,opt,name=checksum_algorithm,json=checksumAlgorithm" json:"checksum_algorithm,omitempty"`
	ChecksumValue     string `protobuf:"bytes,7,opt,name=checksum_value,json=checksumValue" json:"checksum_value,omitempty"`
}

func (m *CachedDependency) Reset()      { *m = CachedDependency{} }
func (*CachedDependency) ProtoMessage() {}
func (*CachedDependency) Descriptor() ([]byte, []int) {
	return fileDescriptor_cached_dependency_148bccb72631d461, []int{0}
}
func (m *CachedDependency) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CachedDependency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CachedDependency.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CachedDependency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CachedDependency.Merge(dst, src)
}
func (m *CachedDependency) XXX_Size() int {
	return m.Size()
}
func (m *CachedDependency) XXX_DiscardUnknown() {
	xxx_messageInfo_CachedDependency.DiscardUnknown(m)
}

var xxx_messageInfo_CachedDependency proto.InternalMessageInfo

func (m *CachedDependency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CachedDependency) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *CachedDependency) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *CachedDependency) GetCacheKey() string {
	if m != nil {
		return m.CacheKey
	}
	return ""
}

func (m *CachedDependency) GetLogSource() string {
	if m != nil {
		return m.LogSource
	}
	return ""
}

func (m *CachedDependency) GetChecksumAlgorithm() string {
	if m != nil {
		return m.ChecksumAlgorithm
	}
	return ""
}

func (m *CachedDependency) GetChecksumValue() string {
	if m != nil {
		return m.ChecksumValue
	}
	return ""
}

func init() {
	proto.RegisterType((*CachedDependency)(nil), "models.CachedDependency")
}
func (this *CachedDependency) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CachedDependency)
	if !ok {
		that2, ok := that.(CachedDependency)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.From != that1.From {
		return false
	}
	if this.To != that1.To {
		return false
	}
	if this.CacheKey != that1.CacheKey {
		return false
	}
	if this.LogSource != that1.LogSource {
		return false
	}
	if this.ChecksumAlgorithm != that1.ChecksumAlgorithm {
		return false
	}
	if this.ChecksumValue != that1.ChecksumValue {
		return false
	}
	return true
}
func (this *CachedDependency) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&models.CachedDependency{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	s = append(s, "CacheKey: "+fmt.Sprintf("%#v", this.CacheKey)+",\n")
	s = append(s, "LogSource: "+fmt.Sprintf("%#v", this.LogSource)+",\n")
	s = append(s, "ChecksumAlgorithm: "+fmt.Sprintf("%#v", this.ChecksumAlgorithm)+",\n")
	s = append(s, "ChecksumValue: "+fmt.Sprintf("%#v", this.ChecksumValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCachedDependency(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CachedDependency) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CachedDependency) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.From)))
	i += copy(dAtA[i:], m.From)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.To)))
	i += copy(dAtA[i:], m.To)
	dAtA[i] = 0x22
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.CacheKey)))
	i += copy(dAtA[i:], m.CacheKey)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.LogSource)))
	i += copy(dAtA[i:], m.LogSource)
	dAtA[i] = 0x32
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.ChecksumAlgorithm)))
	i += copy(dAtA[i:], m.ChecksumAlgorithm)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintCachedDependency(dAtA, i, uint64(len(m.ChecksumValue)))
	i += copy(dAtA[i:], m.ChecksumValue)
	return i, nil
}

func encodeVarintCachedDependency(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CachedDependency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCachedDependency(uint64(l))
	l = len(m.From)
	n += 1 + l + sovCachedDependency(uint64(l))
	l = len(m.To)
	n += 1 + l + sovCachedDependency(uint64(l))
	l = len(m.CacheKey)
	n += 1 + l + sovCachedDependency(uint64(l))
	l = len(m.LogSource)
	n += 1 + l + sovCachedDependency(uint64(l))
	l = len(m.ChecksumAlgorithm)
	n += 1 + l + sovCachedDependency(uint64(l))
	l = len(m.ChecksumValue)
	n += 1 + l + sovCachedDependency(uint64(l))
	return n
}

func sovCachedDependency(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCachedDependency(x uint64) (n int) {
	return sovCachedDependency(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CachedDependency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CachedDependency{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`CacheKey:` + fmt.Sprintf("%v", this.CacheKey) + `,`,
		`LogSource:` + fmt.Sprintf("%v", this.LogSource) + `,`,
		`ChecksumAlgorithm:` + fmt.Sprintf("%v", this.ChecksumAlgorithm) + `,`,
		`ChecksumValue:` + fmt.Sprintf("%v", this.ChecksumValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCachedDependency(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CachedDependency) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCachedDependency
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CachedDependency: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CachedDependency: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CacheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumAlgorithm", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumAlgorithm = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCachedDependency
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChecksumValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCachedDependency(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCachedDependency
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCachedDependency(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCachedDependency
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCachedDependency
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCachedDependency
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCachedDependency
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCachedDependency(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCachedDependency = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCachedDependency   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("cached_dependency.proto", fileDescriptor_cached_dependency_148bccb72631d461)
}

var fileDescriptor_cached_dependency_148bccb72631d461 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xb1, 0x4e, 0x2a, 0x41,
	0x14, 0x86, 0x77, 0xf6, 0x72, 0xb9, 0x97, 0xc9, 0xbd, 0x46, 0xa6, 0x71, 0x42, 0xcc, 0x40, 0x8c,
	0x85, 0x85, 0x42, 0x4c, 0x7c, 0x01, 0xd1, 0xc4, 0xc2, 0x6e, 0x49, 0x6c, 0x37, 0xcb, 0xec, 0xb0,
	0x4b, 0xd8, 0xe1, 0x90, 0x65, 0xd6, 0x64, 0x3b, 0x1f, 0xc1, 0xc7, 0xf0, 0x51, 0x28, 0x29, 0xa9,
	0x88, 0x0c, 0x8d, 0xb1, 0x22, 0xf1, 0x05, 0x0c, 0xc7, 0x05, 0x21, 0x36, 0x93, 0x73, 0xce, 0xf7,
	0x7f, 0x7f, 0x32, 0xf4, 0x48, 0x06, 0x32, 0x56, 0xa1, 0x1f, 0xaa, 0x91, 0x1a, 0x86, 0x6a, 0x28,
	0xf3, 0xe6, 0x28, 0x05, 0x03, 0xac, 0xac, 0x21, 0x54, 0xc9, 0xb8, 0x76, 0x11, 0xf5, 0x4d, 0x9c,
	0x75, 0x9b, 0x12, 0x74, 0x2b, 0x82, 0x08, 0x5a, 0x88, 0xbb, 0x59, 0x0f, 0x37, 0x5c, 0x70, 0xfa,
	0xd2, 0x4e, 0x3e, 0x5c, 0x7a, 0x78, 0x83, 0x95, 0xb7, 0xdb, 0x46, 0xd6, 0xa0, 0xa5, 0x61, 0xa0,
	0x15, 0x27, 0x0d, 0x72, 0x56, 0x69, 0xff, 0x9b, 0xcc, 0xeb, 0xce, 0xfb, 0xbc, 0x8e, 0x37, 0x0f,
	0xdf, 0x75, 0xa2, 0x97, 0x82, 0xe6, 0xee, 0x7e, 0x62, 0x7d, 0xf3, 0xf0, 0x65, 0x35, 0xea, 0x1a,
	0xe0, 0xbf, 0x90, 0xd3, 0x82, 0xbb, 0x06, 0x3c, 0xd7, 0x00, 0x6b, 0xd2, 0x0a, 0x7e, 0xc3, 0x1f,
	0xa8, 0x9c, 0x97, 0x30, 0x52, 0x2d, 0x22, 0xdf, 0xc0, 0xfb, 0x8b, 0xe3, 0xbd, 0xca, 0xd9, 0x25,
	0xa5, 0x09, 0x44, 0xfe, 0x18, 0xb2, 0x54, 0x2a, 0xfe, 0x1b, 0x05, 0x56, 0x08, 0x3b, 0xc4, 0xab,
	0x24, 0x10, 0x75, 0x70, 0x64, 0x1d, 0xca, 0x64, 0xac, 0xe4, 0x60, 0x9c, 0x69, 0x3f, 0x48, 0x22,
	0x48, 0xfb, 0x26, 0xd6, 0xbc, 0x8c, 0xea, 0x69, 0xa1, 0x1e, 0xff, 0x4c, 0x9c, 0x83, 0xee, 0x1b,
	0xa5, 0x47, 0x26, 0xf7, 0xaa, 0x1b, 0x7a, 0xbd, 0x81, 0xec, 0x8e, 0x1e, 0x6c, 0x95, 0xc7, 0x20,
	0xc9, 0x14, 0xff, 0x83, 0x85, 0x8d, 0xa2, 0x90, 0xef, 0xd3, 0x9d, 0xb2, 0xff, 0x1b, 0xf2, 0xb0,
	0x06, 0xed, 0xab, 0xe9, 0x42, 0x90, 0xd9, 0x42, 0x38, 0xab, 0x85, 0x20, 0x4f, 0x56, 0x90, 0x17,
	0x2b, 0xc8, 0xc4, 0x0a, 0x32, 0xb5, 0x82, 0xbc, 0x5a, 0x41, 0xde, 0xac, 0x70, 0x56, 0x56, 0x90,
	0xe7, 0xa5, 0x70, 0xa6, 0x4b, 0xe1, 0xcc, 0x96, 0xc2, 0xf9, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x7e,
	0xb1, 0x4b, 0x1d, 0xfc, 0x01, 0x00, 0x00,
}
